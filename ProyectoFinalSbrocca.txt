Base de datos de un e-commerce

Problema del negocio:

Este e-commerce de ropa estaba teniendo dificultades para gestionar las órdenes de los clientes, para asociar cada orden con los productos correspondientes y controlar el stock. Tampoco 
había un registro de los métodos de pago utilizados por los clientes ni una forma para asociar más de un producto a una sola orden, lo que generaba confusión para hacer devoluciones o modificaciones.

La solución fue crear una base de datos relacional que permitiera:

1-Gestionar el stock de productos correctamente.
2-Asociar cada orden con un producto o más.
3-Controlar el historial de ventas y los métodos de pago.
4-Mejorar la eficiencia al manejar información de los clientes.

Relaciones entre las tablas:

-Productos y detalle_orden: Relación de uno a muchos. Un producto puede estar en varias órdenes.
-Clientes y ordenes: Relación de uno a muchos. Un cliente puede realizar varias órdenes.
-Metodos_pago y ordenes: Relación de uno a muchos. Cada orden tiene un método de pago, y un método de pago puede usarse en varias órdenes.
-Ordenes y detalle_orden: Relación de uno a muchos. Una orden puede incluir varios productos.
-Productos y categorias: Relación de muchos a muchos.


Solución al problema:

Antes de integrar esta base de datos, el comercio electrónico tenía problemas con la gestión del stock y no podía registrar más de un producto en una misma orden de manera eficiente. Con esta base de datos relacional se pudo realizar:

1-Se resolvió el problema del stock, ya que cada producto tiene un campo stock, y el sistema puede actualizar el stock cuando se hace una venta.
2-La tabla detalle_orden puede registrar fácilmente múltiples productos en una sola orden, lo cual facilita la gestión de carritos de compra y devoluciones.
3-El historial de métodos de pago y clientes está ahora claramente asociado a cada transacción, lo que hace más fácil la revisión de las compras que se realizan.
4-Este modelo relacional permite que el e-commerce gestione sus operaciones de manera más eficiente y escalable.

Vistas

vista_ordenes_clientes: 

Muestra una lista de las órdenes junto con la información del cliente que realizó la compra.
El objetivo es facilitar la consulta rápida de las órdenes y los clientes que las realizaron, útil para revisiones o soporte al cliente.
Tablas que la componen: ordenes y clientes.

vista_productos_vendidos:

Muestra los productos vendidos junto con su cantidad y el total generado.
El objetivo es proveer una vista clara de qué productos se están vendiendo más y el dinero generado por cada uno.
Tablas que la componen: detalle_orden y productos.

Funciones:

calcular_total_orden:

Calcula el total de una orden sumando los precios de los productos y la cantidad.
El objetivo es automatizar el cálculo del total de una orden.
Tablas que la componen: detalle_orden.

cantidad_ordenes_cliente:

Devuelve el número de órdenes que ha realizado un cliente.
El objetivo es dar información rápida sobre la actividad de un cliente en el sistema.
Tablas que la componen: ordenes.

Stored Procedures:

agregar_producto:

Agrega un nuevo producto al inventario.
El objetivo es simplificar la inserción de nuevos productos en la base de datos.
Tablas que lo componen: productos.

actualizar_stock_producto:

Actualiza el stock de un producto específico.
El objetivo es facilitar la actualización del stock cuando se reciben nuevos productos o se ajustan inventarios.
Tablas que lo componen: productos.

Triggers:

actualizar_stock_trigger:

Este trigger se activa después de insertar un registro en la tabla detalle_orden, es decir, cuando se realiza una compra. Su objetivo es reducir el stock de los productos comprados en función de la cantidad solicitada por el cliente.
El objetivo es mantener actualizado el stock automáticamente cada vez que se inserta una nueva orden con productos vendidos.
Tablas que lo componen: productos, detalle_orden.

log_nueva_orden_trigger:

Este trigger se activa después de insertar una nueva orden en la tabla ordenes. Su objetivo es registrar la inserción de la nueva orden en una tabla de logs, donde se guarda información básica de la orden como el ID de la orden, el ID del cliente y la fecha.
El objetivo es registrar automáticamente la creación de nuevas órdenes en una tabla de logs para fines de auditoría o seguimiento.
Tablas que lo componen: ordenes, log_ordenes.




